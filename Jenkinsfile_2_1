#!groovy
env.submitter = ''
env.projectid


pipeline {
    agent any

    stages {
        stage("Initialize") {
            steps{
                script{
                    env.projectid = sh(script: 'gcloud config get-value project', returnStdout: true).trim()
                    echo env.projectid
                    sh("./practice2_init.sh")
                    sh("sed -i -e s/_BRANCH_NAME_/develop/g iac/cicd-edu-cluster/configurations/dev-config.tfvars")
                    sh("sed -i -e s/_BRANCH_NAME_/develop/g practice2.yml")
                }
            }
        }

        /*************** 2-2-2. 단위테스트(JUnit) 결과 초기화 ******************/
        //TODO 2-2-2.(stage추가)JUnit 결과 리포트가 남아있는 경우 파이프라인 fail 발생하기 때문에삭제
        //1) stage 추가:Init test result
        //2) ./build/test-results/test/*.xml 삭제

        /**************************************************************************/


        /*************** 2-1-1. 소스 테스트 및 빌드  ******************/
        stage("App Build & Test") {
            steps {
                script {
                    sh("./gradlew build")
                }
            }
        }
        /*************************************************************/

        /*************** 2-2-3. 정적분석(SonarQube) 실행 ******************/
        //TODO 2-2-3. 정적분석 stage 추가
        //1) stage 추가:SonarQube analysis
        //2) ./gradlew sonarqube 실행

        /*********************************************************************/


        /*************** 2-2-4. 정적분석(SonarQube) Quality Gate 적용 ******************/
        //TODO 2-2-4. SonarQube Quality Gate 결과를 가져오는 stage 추가
        //1) stage 추가:SonarQube Quality Gate
        //2) timeout setting & waitForQualityGate setting

        /*********************************************************************************/


        /******************* 2-1-2. Docker Build *********************/
        stage("Docker Build & Push") {
            steps {
                script {
                    sh("docker build -t asia.gcr.io/${env.projectid}/develop/practice2:0.1 .")
                    sh("echo 'Y' | gcloud auth configure-docker")
                    sh("docker push asia.gcr.io/${env.projectid}/develop/practice2:0.1")
                }
            }
        }
        /*************************************************************/

        /*********************** Infra Stage *************************/
        /****************** Don't Edit This Area *********************/
        stage("Infra Check") {
            steps {
                script {
                    println("Infra Check")
                    sh("""
			            cd ./iac/cicd-edu-cluster
                        terraform init -backend-config="prefix=dev" -no-color
                        terraform apply -var-file="configurations/dev-config.tfvars" -auto-approve -no-color
                        gcloud container clusters list
                    """)
                }
            }
        }
        /*************************************************************/

        /*************** 2-1-3. Kubernetes Deploy ********************/
        stage("Kubernetes Deploy") {
            steps {
                script {
                    sh("gcloud container clusters get-credentials cicd-edu-cluster-develop --zone asia-northeast3-a --project ${env.projectid}")
                    sh("kubectl apply -f practice2.yml")
                }
            }
        }
        /*************************************************************/
    }

    /*************** 2-2-2. 단위테스트(JUnit) 결과 리포팅 ******************/
    //TODO 2-2-2 JUnit 결과 항상 리포팅하는 post-always 구문 추가
    //3) post-always 구문 추가
    //4) junit report(**/build/test-results/test/*.xml)

    /**************************************************************************/

}
